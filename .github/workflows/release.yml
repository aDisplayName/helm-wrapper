name: Release

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: false

env:
  COMMIT_NAME: aDisplayName
  COMMIT_EMAIL: mattali@gmail.com

jobs:
  semver:
    name: Semantic Version
    runs-on: ubuntu-22.04
    outputs:
      last: ${{ steps.dry-run.outputs.last_release_version }}
      published: ${{ steps.dry-run.outputs.new_release_published }}
      channel: ${{ steps.dry-run.outputs.new_release_channel }}
      version: ${{ steps.dry-run.outputs.new_release_version }}
      major: ${{ steps.dry-run.outputs.new_release_major_version }}
      minor: ${{ steps.dry-run.outputs.new_release_minor_version }}
      patch: ${{ steps.dry-run.outputs.new_release_patch_version }}
      notes: ${{ steps.dry-run.outputs.new_release_notes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
  
      - name: Run semantic-release (dry-run)
        id: dry-run
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Inspect semantic-release (dry-run) outcome
        shell: python
        env:
          PYTHONPATH: ${{ github.workspace }}/.github
          SR_LAST: ${{ steps.dry-run.outputs.last_release_version }}
          SR_PUBLISHED: ${{ steps.dry-run.outputs.new_release_published }}
          SR_CHANNEL: ${{ steps.dry-run.outputs.new_release_channel }}
          SR_VERSION: ${{ steps.dry-run.outputs.new_release_version }}
          SR_MAJOR: ${{ steps.dry-run.outputs.new_release_major_version }}
          SR_MINOR: ${{ steps.dry-run.outputs.new_release_minor_version }}
          SR_PATCH: ${{ steps.dry-run.outputs.new_release_patch_version }}
          SR_NOTES: ${{ steps.dry-run.outputs.new_release_notes }}
        run: |
          from lib import *
          import os
  
          header('semantic-release job outputs')
          info('last      = {}'.format(os.environ['SR_LAST']))
          info('published = {}'.format(os.environ['SR_PUBLISHED']))
          info('channel   = {}'.format(os.environ['SR_CHANNEL']))
          info('version   = {}'.format(os.environ['SR_VERSION']))
          info('major     = {}'.format(os.environ['SR_MAJOR']))
          info('minor     = {}'.format(os.environ['SR_MINOR']))
          info('patch     = {}'.format(os.environ['SR_PATCH']))
          info('notes ⏎\n{}'.format(os.environ['SR_NOTES']))
  
          header('sanity checks')
          action('should be published')
          assert_equality((
              (os.environ['SR_PUBLISHED'], 'true'),
          ))

  release:
    name: Release
    needs:
      # - e2e_upgrade
      - semver
    runs-on: ubuntu-22.04
    outputs:
      last: ${{ steps.release.outputs.last_release_version }}
      published: ${{ steps.release.outputs.new_release_published }}
      channel: ${{ steps.release.outputs.new_release_channel }}
      version: ${{ steps.release.outputs.new_release_version }}
      major: ${{ steps.release.outputs.new_release_major_version }}
      minor: ${{ steps.release.outputs.new_release_minor_version }}
      patch: ${{ steps.release.outputs.new_release_patch_version }}
      notes: ${{ steps.release.outputs.new_release_notes }}
      prerelease: ${{ steps.inspect.outputs.prerelease }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: repository
          persist-credentials: false

      - name: Run semantic-release
        id: release
        uses: cycjimmy/semantic-release-action@v4
        with:
          working_directory: repository
        env:
          # GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_COMMITTER_NAME: ${{ env.COMMIT_NAME }}
          GIT_COMMITTER_EMAIL: ${{ env.COMMIT_EMAIL }}
          GIT_AUTHOR_NAME: ${{ env.COMMIT_NAME }}
          GIT_AUTHOR_EMAIL: ${{ env.COMMIT_EMAIL }}

      - name: Inspect semantic-release outcome
        id: inspect
        shell: python
        env:
          PYTHONPATH: ${{ github.workspace }}/repository/.github
          SRDRY_CHANNEL: ${{ needs.semver.outputs.channel }}
          SRDRY_VERSION: ${{ needs.semver.outputs.version }}
          SR_LAST: ${{ steps.release.outputs.last_release_version }}
          SR_PUBLISHED: ${{ steps.release.outputs.new_release_published }}
          SR_CHANNEL: ${{ steps.release.outputs.new_release_channel }}
          SR_VERSION: ${{ steps.release.outputs.new_release_version }}
          SR_MAJOR: ${{ steps.release.outputs.new_release_major_version }}
          SR_MINOR: ${{ steps.release.outputs.new_release_minor_version }}
          SR_PATCH: ${{ steps.release.outputs.new_release_patch_version }}
          SR_NOTES: ${{ steps.release.outputs.new_release_notes }}
        run: |
          from lib import *
          import os

          header('semantic-release job outputs')
          info('last      = {}'.format(os.environ['SR_LAST']))
          info('published = {}'.format(os.environ['SR_PUBLISHED']))
          info('channel   = {}'.format(os.environ['SR_CHANNEL']))
          info('version   = {}'.format(os.environ['SR_VERSION']))
          info('major     = {}'.format(os.environ['SR_MAJOR']))
          info('minor     = {}'.format(os.environ['SR_MINOR']))
          info('patch     = {}'.format(os.environ['SR_PATCH']))
          info('notes ⏎\n{}'.format(os.environ['SR_NOTES']))

          header('sanity checks')
          action('should be published')
          assert_equality((
              (os.environ['SR_PUBLISHED'], 'true'),
          ))
          action('consistency with the dry-run')
          assert_equality((
              (os.environ['SR_CHANNEL'], os.environ['SRDRY_CHANNEL']),
              (os.environ['SR_VERSION'], os.environ['SRDRY_VERSION']),
          ))

          header('set the prerelease status')
          is_prerelease = '-' in os.environ['SR_VERSION']
          info('pre-release = {}'.format(is_prerelease))
          output = '{}'.format(str(is_prerelease).lower())
          with open(os.environ['GITHUB_OUTPUT'], 'a') as outfile:
              print (f'prerelease={output}', file=outfile)

  containers:
    name: Containers
    needs:
      - release
    runs-on: ubuntu-22.04
    env:
      VERSION: ${{ needs.release.outputs.version }}
      PRERELEASE: ${{ needs.release.outputs.prerelease }}
      GHCR_IMAGE: "ghcr.io/adisplayname/kube-image-keeper"
    steps:
      - name: Configure git
        run: |
          set -euo pipefail
          git config --global user.name '${{ env.COMMIT_NAME }}'
          git config --global user.email '${{ env.COMMIT_EMAIL }}'

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: repository

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.COMMIT_NAME }}
          # password: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_IMAGE }}

      - name: Build container images
        uses: docker/build-push-action@v6
        with:
          context: repository
          platforms: linux/amd64
          file: repository/Dockerfile.github
          build-args: |
            "VERSION=${{ env.VERSION }}"
            "REVISION=${{ github.sha }}"
          push: false
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.GHCR_IMAGE }}:${{ env.VERSION }}

      - name: Push container images tag (Latest)
        uses: docker/build-push-action@v6
        if: ${{ env.PRERELEASE != 'true' }}
        with:
          context: repository
          platforms: linux/amd64
          build-args: |
            "VERSION=${{ env.VERSION }}"
            "REVISION=${{ github.sha }}"
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.GHCR_IMAGE }}:latest

      - name: Push container images tag (Release)
        uses: docker/build-push-action@v6
        with:
          context: repository
          platforms: linux/amd64
          build-args: |
            "VERSION=${{ env.VERSION }}"
            "REVISION=${{ github.sha }}"
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.GHCR_IMAGE }}:${{ env.VERSION }}

      - name: Push alpine container images tag (Release)
        uses: docker/build-push-action@v6
        with:
          context: repository
          platforms: linux/amd64
          build-args: |
            "VERSION=${{ env.VERSION }}"
            "REVISION=${{ github.sha }}"
          target: alpine
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.GHCR_IMAGE }}:${{ env.VERSION  }}-alpine

  cleanup:
    name: Cleanup
    needs:
      - containers
    runs-on: ubuntu-22.04
    steps:
      - name: Delete assets artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: binaries